@using System.Drawing
@using BasicBlazorLibrary.Components.Arrows 
@using BasicBlazorLibrary.Components.Layouts
<CascadingValue Value="this" IsFixed="true">
    @if (MenuList.Count > 0 && HasMenu == false)
    {
        <div>
            Cannot have menu items because you have chosen HasMenu as false
        </div>
        return;
    }
    <LeftOverLayout>
        <TopContent>
            <div class="@GetFirstClass() main" style="padding: @Padding; font-size: @MainFontSize;  background-color: @MainBackgroundColor; color: @MainTextColor; ">
                <div class="firstflex">
                    <div class="centerdiv">
                        @if (BackClicked.HasDelegate == true && ShowBack)
                        {
                            <div class="inline centerdiv" style="margin-right: 10px;">
                                <ArrowLeftComponent Clicked="BackClicked" BackgroundColor="@ArrowColor" StrokeColor="@ArrowStroke" TargetHeight="@ArrowHeight" />
                            </div>
                        }
                        @Title
                    </div>
                    <div class="centerdiv">
                        <div class="barcontent">
                            @if (BarContent != null)
                            {
                                @BarContent
                            }
                        </div>
                        @if (MenuList.Count > 0)
                        {
                            <div class="inline centerdiv">
                                <CanvasLayout Clicked="() => _showMenu = true"
                                              ViewPort="_viewPort"
                                              ContainerHeight="@GetContainer"
                                              ContainerWidth="@GetContainer"
                                              style="cursor: pointer; margin-right: 5px;">
                                    <CanvasItem Location="new PointF(15, 2)">
                                        <div style="width: @CircleSize; height: @CircleSize; background-color: @CircleColor; border-radius: 50%;">

                                        </div>
                                    </CanvasItem>
                                    <CanvasItem Location="new PointF(15, 15)">
                                        <div style="width: @CircleSize; height: @CircleSize; background-color: @CircleColor; border-radius: 50%;">

                                        </div>
                                    </CanvasItem>
                                    <CanvasItem Location="new PointF(15, 28)">
                                        <div style="width: @CircleSize; height: @CircleSize; background-color: @CircleColor; border-radius: 50%;">

                                        </div>
                                    </CanvasItem>
                                </CanvasLayout>
                            </div>
                        }
                        @if (CloseClicked.HasDelegate)
                        {
                            <div class="inline centerdiv;" style="font-size: @CloseHeight; cursor:pointer;" @onclick="()=> CloseClicked.InvokeAsync()">
                                X
                            </div>
                        }
                    </div>
                </div>
            </div>
            @if(HasMenu == true)
            {
                <MenuModal MenuList="MenuList"
                           BackgroundColor="@MenuBackgroundColor"
                           FontSize="@MenuFontSize"
                           Height="@MenuHeight"
                           TextColor="@MenuTextColor"
                           Width="@MenuWidth"
                           ItemHeight="@ItemHeight"
                           @bind-Visible="_showMenu" />
            }
            
        </TopContent>
        <MainContent>
            @if (CanChangeWithoutTabs == false)
            {
                @MainContent
                return;
            }
            @if (AlwaysShowBar)
            {
                @MainContent
                return;
            }
        </MainContent>
    </LeftOverLayout>
</CascadingValue>